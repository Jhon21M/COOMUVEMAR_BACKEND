// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Productor {
  id                   Int                  @id @default(autoincrement())
  nombre               String
  apellido             String
  numeroCedula         String?              @db.VarChar(30)
  numeroTelefono       String?
  fechaIngresoPrograma DateTime             @default(now())
  estadoProgramaC      String
  Finca                Finca[]
  Inspectorproductor   InspectorProductor[]

  @@map("productores")
}

model InspectorProductor {
  id          Int       @id @default(autoincrement())
  IDProductor Int
  productor   Productor @relation(fields: [IDProductor], references: [id], onDelete: Cascade, onUpdate: Cascade)

  IDTrabajador Int
  trabajador   Trabajador @relation(fields: [IDTrabajador], references: [id], onDelete: Cascade, onUpdate: Cascade)

  estadoInspeccion String?

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Finca {
  id                    Int     @id @default(autoincrement())
  nombre                String
  comunidad             String
  areaCacaoProduccion   String?
  areaCacaoDesarrollo   String?
  produccionUltimoSiclo String?
  estimadoCosecha       String?

  IDProductor Int
  productor   Productor @relation(fields: [IDProductor], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Ficha       Ficha[]

  @@map("fincas")
}

model DetalleFinca {
  id Int @id @default(autoincrement())
  
}

model Trabajador {
  id                 Int                  @id @default(autoincrement())
  nombre             String
  apellido           String
  numeroTelefono     String
  urlImg             String?              @unique
  createAt           DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Ficha              Ficha[]
  Usuario            Usuario[]
  Inspectorproductor InspectorProductor[]

  @@map("trabajadores")
}

model Ficha {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  localizacion Json
  analizada    Boolean

  IDTrabajador Int
  trabajador   Trabajador @relation(fields: [IDTrabajador], references: [id], onDelete: Cascade, onUpdate: Cascade)

  IDFinca Int
  finca   Finca @relation(fields: [IDFinca], references: [id], onDelete: Cascade, onUpdate: Cascade)

  Documento       Documento[]
  Desicion        Desicion[]
  InformacionDato InformacionDato[]

  @@map("fichas")
}

model Documento {
  id               Int    @id @default(autoincrement())
  declaracion      String
  huella           Bytes
  DOCDictamenFinal String

  IDFicha Int   @unique
  ficha   Ficha @relation(fields: [IDFicha], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Desicion {
  id          Int    @id @default(autoincrement())
  desicion    String
  descripcion String

  IDFicha Int   @unique
  ficha   Ficha @relation(fields: [IDFicha], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SeccionesFicha {
  id          Int     @id @default(autoincrement())
  nombre      String
  descripcion String?
  Dato        Dato[]

  @@map("SeccionesFichas")
}

model Dato {
  id          Int     @id @default(autoincrement())
  titulo      String
  descripcion String?

  seccionesFicha   SeccionesFicha @relation(fields: [IDSeccionesFicha], references: [id], onDelete: Cascade)
  IDSeccionesFicha Int

  InformacionDato InformacionDato[]

  @@map("datos")
}

model InformacionDato {
  id          Int     @id @default(autoincrement())
  informacion String
  descripcion String?

  dato   Dato @relation(fields: [IDDato], references: [id], onDelete: Cascade, onUpdate: Cascade)
  IDDato Int

  ficha   Ficha @relation(fields: [IDFicha], references: [id], onDelete: Cascade, onUpdate: Cascade)
  IDFicha Int

  @@map("informacionDatos")
}

model Usuario {
  id           Int        @id @default(autoincrement())
  createAt     DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  email        String     @unique
  hash         String
  role         Role       @default(USER)
  IDTrabajador Int
  trabajador   Trabajador @relation(fields: [IDTrabajador], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("usuarios")
}

enum Role {
  USER
  ADMIN
}
